              -------------APPENDICE  B---------------
              *** Meta-affirmation (Metastatement) ***


Les meta-affirmations sont des directives du compilateur.Strictement  parlant,les meta-affirmations ne font pas partie du language TML BASIC ,mais plutot une construction speciale utilisée par les programmes pour controller le comportement du compilateur du TML BASIC.Par exemple,on peut utilisé une meta-affirmation pour specifié une String pool (reservoir de chaine)

La plupart des meta-affirmations correspondent à une option dans le dialogue Preferences.Toutefois,l'effet d'une meta-affirmation prend toujours le pas (donc annule) sur le reglage d'une option du dialogue Preferences.Les meta-affirmations qui apparaissent dans le menu  Preferences sont:

$CheckSTack
$Debug
$EventTrapping
$KeyboardBreak
$OnError
$StackSize
$StringPoolSize

Voir chapitre 6 pour des infos (poil au dos) sur le dialogue Preferences

Une meta-affirmation doit apparaitre seule sur une ligne ,et doit commencer par un signe $ immediatement suivie par le nom de la meta-affirmation.Si le nom n'est pas éppelé comme une des meta-affirmations du TML BASIC ,TML BASIC vous donne l'erreur "Unknown metastatement".Apres le nom de la meta-affirmation on trouve des arguments .Ceux-ci peuvent etre les mots réservés ON et OFF,une constante numérique,ou une constante chaine.Le code suivant montre comment on peut utilisé une meta-affirmation dans un programme.

$stringpoolsize 1
$keyboardbreak OFF
$debug on
input "How many number to average:",howmany%
Total=0
for i% =1 to howmany%
    print "number ";i%;":"
    input nextvalue
    total=total+nextvalue
next i%
print "the average is :";total/howmany%
<page-footer>



Page 396

les paragraphes suivant décrivent les actions et les arguments de chacune des meta-affirmations du TML BASIC .

-->$CHECKSTACK

Syntaxe: $CheckStack ON/OFF

par défaut:$ChecksStack OFF

Comme on l'a vu dans le chapitre 8,TML BASIC implemente une structure de données appellée Runtime Stack.Cette  pile est utilisé pour l'implementation des affirmations GOSUB,PROC et FN  aussi bien que pour l'allocation de stockage des parametres et des valeurs locales grace à l'affirmation LOCAL.La pile a une taille limite et fixe comme il est specifie au moyen de la meta-affirmation $stacksize ou son option correspondante de le dialogue Preferences.Ainsi,il est possible d'ecrire des programmes qui dépassent la capacité de stockage de la pile.

Cette option  est utilisé pour dire au compilateur de génerer un code special pour chaque code d'entrée de procedures et de fonctions.Ce  code s'assure qu'il y a suffissament d'espace dans la  pile runtime  pour appeller la procedure et pour allouer ses variables locales.Si il n'y a  pas assez d'espace,on obtient l'erreur de runtime "Stack Overflow".Si on a mis en marche l'option Debug,le debuggeur TML BASIC va montrer quelle procedure ou fonction a provoqué le depassement de pile.

La plupart des programmes n'ont jamais besoin de plus d'espace pour la pile que l'espace  par défaut de 8Ko,donc cette option est mise hors service par defaut.Toutefois  si votre programme se comporte de facon très étrange il se pourrait que la pile deviennent trop grand et détruisent de la memoire.En mettant cette option ON ,vous pourrez déterminez si votre programme a vraiment ce genre de problème.Si c'est le cas vous devrez augmenter l'espace alloué à la pile pour le programme.

-->*CODESEGEMENT

Syntax:$codesegment "segmentname"

par défaut:$codesegment "main"

Une application de l'apple IIgs peut etre constituée de un ou plusieurs segments de code.Un segment de code est une structure de données speciale de l'apple IIgs implementée par le System Loader.Un segment de code contient le code binaire d'un programme ,l'information pour son relogement et d'autres valeurs spéciales.Chaque segment de code  a un unique nom.

Les programmes TML BASIC ont deux segment de codes par defaut : "main" et " mainprog".Le segment "mainprog" contient tout le code pour le programme principal alors que le segment "main" contient tout le code pour les procédures et les fonctions definis par l'utilisateur.
<page-footer>



Page 397
De plus,le code pour les librairies compilées séparement est contenu dans le segment de code "main".Les petits programmes sont d'habitude constitués de ces 2 segments,but les plus grand doivent etre divisés en plusieurs segments car le GS limite la taille d'un segment de code à 64 ko.La raison pour la restriction de taille est qu'segment de code  ne doit pas dépasser les frontieres d'un banc de mémoire qui est de 64Ko sur le GS.

La meta-affirmation $codesegment est utilisée pour controler le segment de code généré pour les procédures et les fonctions(??).Il n'est pas possible de diviser le programme principal (main) (les affirmations non contenus dans une procedure ou une fonction ).Quand la meta-affirmation $codesegment apparait dans le code source ,le code de toutes les procedures et fonctions suivantes est généré vers le nouveau segment de code.

--->$DATASEGMENT

Syntax: $datasegment "segmentname"

par défaut : $datasegment "-global"

Comme les segments de code ,une application GS peut etre constituée de un ou plusieurs segments de donnée.Un segment de donnée est une fonction spéciale du GS implementée par le System loader.Un segment de donnée contient l'information neccessaire pour allouer le stockage et initialiser la memoire pour les variables globales.Chaque segment de donnée a un nom unique.

Les programmes TML BASIC ont un segment de donnée par defaut:"-global" .Usuellement les programmes sont constitué d'un unique segment de données  mais le sprogrammes qui déclarent un gradn nombre de variables globales ou de tableaux qui sont très grand doivent diviser le stockage global en plusieurs segments de donnée  car le GS limite la taille d'un segment de donnée à 64 Ko.La raison de cette restriction est du au fait qu'segment de donnée ne doit pas chevaucher les frontieres d'un banc qui mesure 64 Ko sur le GS.

la meta-affirmation $datasegment est utilisé pour controler le segment de donnée o| le stockage de variables globales est allouée.TML BASIC alloue le stockage d'une variable globale ou d'un tableau quand il est utilisé pour la première fois,ou quand une variable tableau est declarée dans une affirmation DIM.Au moment de la déclaration TML basic alloue le stockage de la variable dans le segment de donnée en cours.POur changer le segment de donnée en cours utilisez la meta-affirmation $datasegment

--->$DEBUG

Syntaxe : $DEBUG ON/OFF

par defaut: $DEBUG ON
<page-footer>



Page 398

La meta-affirmation $debug est utilisé pour controller la generation du code de debbugage par le compilateur TML BASIC qui est utilisé par le debuggueur du TML BASIC  pour detecté et rapporter les erreurs de runtime.Le code généré controle toutes les erreurs de runtime ,tel que overflow error,illequal quantity error,etc...il genere egalement une structure de données spéciales appelé line number table  de telle facon  que le debuggeur TML BASIC  puisse de terminer dans quelle ligne l'erreur s'est produite.Si cette options est mise hors service (OFF),aucune erreur de runtime sera detectée.Les erreurs de runtime sont listé dans l'appendice A

L'option debug augmentent la taille d'un programme et le ralentit.cette option devrait etre mise hors service lorsqu'on sait qu'un programme est correcte,et ne neccesite donc plus l'emploie du code de debuggage.


--->$EVENTTRAPPING

syntaxe : $EventTrapping on/off

par défaut :$eventtrapping off

Cette meta-affirmation  doit etre mise en service (ON) quand un programme contient des informations qui néccessitent l'event trapping (le piegage des evenements).Ces affirmations sont ON KBD et ON TIMER.Quand ces informations sont sont utilisées ,TML BASIC  doit genere du code entre chaque informations pour verifier la presence d'un evenement clavier ou temps.Cette option devrait mise en service seulement quand un programme contient ces informations car cette options ralmentit le programme et augmentent sa taille.

Si un programme contient les affirmations ON KBD ou ON TIMER,et si event trapping est hors service ,TML BASIC  rapportera une erreur .Voir chapitre 10 pour + d'infos à propos de ces 2 informations.

--->$keyboardbreak

syntaxe: $keyboardbreak on/off

default: $keyboardbreak on

La meta-affirmation  keyboardbreak est utilisé pour implementer l'information On BREAK.elle neccessite egalement qu'on autorise l'abortement d'un programme en tapant Control-C.

Si cette option est mise en service,TML BASIC  genere du code entre chaque information pour voir si on a taper control-C.Si cette option est hors service ,il est impossible d'avorter l'execution d'un programme TML BASIC;et la seule facon d'aborter le programme serait de faire un RESET.Si vous n'avez pas l'intention  d'avorter l'execution de votre programme et que  vous n'utilisez pas l'information ON BREAK ,vous devez alors mettre hors service cette option de telle facon que votre programme tourne plus vite et prenne moins de place...
<page-footer>



Page 399
-->$ONERROR

SYNTAX:$onerror ON/OFF

Par default:$onerror ON

La meta-affirmation onerror est utilisee pour indiquer au compilateur du TML BASIC que le programme contient l'affirmation ON ERR en meme temps que les affirmations RESUME et/ou RESUME NEXT. Ces affirmations ont besoin que la line number table (tableau des numeros de lignes) soit généré de telle façon que le TML BASIC puisse determiner à partir de quelle ligne resume ou resume next(=revenir à l'adresse spécifié ??)  après qu'une erreur ait été géré par la liste d'affirmation ON ERR.
Si votre programme ne contient pas ces affirmations alors il faut mieux mettre cette option hors service puisque cela va reduire la taille de votre programme.Toutefois,si cette option est mise hors service et qu'un programme contient un ON ERROR ,RESUME ou RESUME NEXT ,TML BASIC vous donnera une erreur.

-->$STACKSIZE

syntaxe : $Stacknumber number

par défaut : *stacknumber 8

Comme décrit dans la meta-affirmation $checkstack, TML BASIC  implemente une structure de données appellé la pile runtime (runtime stack) pour l'implementation des GOSUB,PROC,LOCAL et FN.LA taille  par défaut de la pile de runtime est de 8Ko.Toutefois,certains programmes peuvent avoir besoin d'une pile plus grande parce qu'ils utilisent un grand nombre d'appels de procedure ou de variables locales.On peut changer la taille de la pile grace à $stacksize pour la faire varier entre 1 Ko et 32Ko.L'argument de la meta-affirmation $stacksize doit etre un  nombre constant et entier.La valeur est exprimée en Ko.Ainsi 1 signifie 1Ko,2 signifie 2Ko,etc.Voir la chapitre 8 pour plus d'informations sur la pile de runtime.

-->$STRINGPOOLSIZE

syntaxe:$stringpoolsize  number

par défaut:$stringpoolsize 10

Les valeurs de toutes les variables chaines et de toutes les constantes chaines  sont rangées dans une structure de données spéciales appellée String Pool (reservoir de chaine).Le string pool a une  taille limité et fixé qui est donné par $stringpoolsize ou par son option correspondante dans le menu Preferences.Par défaut la taille du string pool est de 10Ko.Si un programme n'a pas suffissament de  place pour les chaines cette valeur devra etre augmentée.
<page-footer>



Page 400
La taille maximun de string pool est de 64 Ko et la taille mini est de 1Ko.l'argument de $stringpoolsize est donné en Ko (1->1Ko,2->2Ko,etc). Pour plus d'infos à propos des chaines,données chaines et le string pool voir le chapitre 7.

Fin de l'appendice B



Page 401